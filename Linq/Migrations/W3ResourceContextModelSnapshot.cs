// <auto-generated />
using System;
using Linq.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Linq.Migrations
{
    [DbContext(typeof(W3ResourceContext))]
    partial class W3ResourceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Linq.Models.Actor", b =>
                {
                    b.Property<string>("ActFname")
                        .HasColumnName("act_fname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ActGender")
                        .HasColumnName("act_gender")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("ActId")
                        .HasColumnName("act_id")
                        .HasColumnType("int");

                    b.Property<string>("ActLname")
                        .HasColumnName("act_lname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.ToTable("Actor","Movies");
                });

            modelBuilder.Entity("Linq.Models.AffiliatedWith", b =>
                {
                    b.Property<int>("Physician")
                        .HasColumnName("physician")
                        .HasColumnType("int");

                    b.Property<int>("Department")
                        .HasColumnName("department")
                        .HasColumnType("int");

                    b.Property<bool?>("Primaryaffiliation")
                        .HasColumnName("primaryaffiliation")
                        .HasColumnType("bit");

                    b.HasKey("Physician", "Department")
                        .HasName("PK__Affiliat__82B9208A3D327DB9");

                    b.HasIndex("Department");

                    b.ToTable("Affiliated_With","Hospital");
                });

            modelBuilder.Entity("Linq.Models.Appointment", b =>
                {
                    b.Property<int>("Appointmentid")
                        .HasColumnName("appointmentid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDtTime")
                        .HasColumnName("end_dt_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Examinationroom")
                        .HasColumnName("examinationroom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Patient")
                        .HasColumnName("patient")
                        .HasColumnType("int");

                    b.Property<int?>("Physician")
                        .HasColumnName("physician")
                        .HasColumnType("int");

                    b.Property<int?>("Prepnurse")
                        .HasColumnName("prepnurse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDtTime")
                        .HasColumnName("start_dt_time")
                        .HasColumnType("datetime");

                    b.HasKey("Appointmentid");

                    b.HasIndex("Patient");

                    b.HasIndex("Physician");

                    b.HasIndex("Prepnurse");

                    b.ToTable("Appointment","Hospital");
                });

            modelBuilder.Entity("Linq.Models.AsstRefereeMast", b =>
                {
                    b.Property<int>("AssRefId")
                        .HasColumnName("ass_ref_id")
                        .HasColumnType("int");

                    b.Property<string>("AssRefName")
                        .HasColumnName("ass_ref_name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("int");

                    b.HasKey("AssRefId");

                    b.HasIndex("CountryId");

                    b.ToTable("asst_referee_mast","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.Block", b =>
                {
                    b.Property<int>("Blockfloor")
                        .HasColumnName("blockfloor")
                        .HasColumnType("int");

                    b.Property<int>("Blockcode")
                        .HasColumnName("blockcode")
                        .HasColumnType("int");

                    b.HasKey("Blockfloor", "Blockcode")
                        .HasName("PK__Block__AA400D3196C1CFB4");

                    b.ToTable("Block","Hospital");
                });

            modelBuilder.Entity("Linq.Models.CoachMast", b =>
                {
                    b.Property<int>("CoachId")
                        .HasColumnName("coach_id")
                        .HasColumnType("int");

                    b.Property<string>("CoachName")
                        .HasColumnName("coach_name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("CoachId");

                    b.ToTable("coach_mast","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.Countries", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("numeric(10, 0)");

                    b.HasKey("CountryId");

                    b.HasIndex("RegionId");

                    b.ToTable("Countries","HR");
                });

            modelBuilder.Entity("Linq.Models.Customer", b =>
                {
                    b.Property<decimal>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("numeric(5, 0)");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("CustName")
                        .HasColumnName("cust_name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Grade")
                        .HasColumnName("grade")
                        .HasColumnType("numeric(3, 0)");

                    b.Property<decimal?>("SalesmanId")
                        .HasColumnName("salesman_id")
                        .HasColumnType("numeric(5, 0)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer","Inventory");
                });

            modelBuilder.Entity("Linq.Models.Department", b =>
                {
                    b.Property<int>("DepId")
                        .HasColumnName("dep_id")
                        .HasColumnType("int");

                    b.Property<string>("DepLocation")
                        .HasColumnName("dep_location")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("DepName")
                        .HasColumnName("dep_name")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("DepId")
                        .HasName("PK_department_1");

                    b.ToTable("department","Employee");
                });

            modelBuilder.Entity("Linq.Models.Department1", b =>
                {
                    b.Property<int>("Departmentid")
                        .HasColumnName("departmentid")
                        .HasColumnType("int");

                    b.Property<int?>("Head")
                        .HasColumnName("head")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Departmentid");

                    b.HasIndex("Head");

                    b.ToTable("Department","Hospital");
                });

            modelBuilder.Entity("Linq.Models.Departments", b =>
                {
                    b.Property<decimal>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<decimal?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("numeric(6, 0)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("Departments","HR");
                });

            modelBuilder.Entity("Linq.Models.Director", b =>
                {
                    b.Property<string>("DirFname")
                        .HasColumnName("dir_fname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("DirId")
                        .HasColumnName("dir_id")
                        .HasColumnType("int");

                    b.Property<string>("DirLname")
                        .HasColumnName("dir_lname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.ToTable("Director","Movies");
                });

            modelBuilder.Entity("Linq.Models.Employees", b =>
                {
                    b.Property<int>("EmpId")
                        .HasColumnName("emp_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Commission")
                        .HasColumnName("commission")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<int?>("DepId")
                        .HasColumnName("dep_id")
                        .HasColumnType("int");

                    b.Property<string>("EmpName")
                        .HasColumnName("emp_name")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnName("hire_date")
                        .HasColumnType("date");

                    b.Property<string>("JobName")
                        .HasColumnName("job_name")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Salary")
                        .HasColumnName("salary")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("EmpId");

                    b.HasIndex("DepId");

                    b.ToTable("employees","Employee");
                });

            modelBuilder.Entity("Linq.Models.Employees1", b =>
                {
                    b.Property<decimal>("EmployeeId")
                        .HasColumnName("employee_id")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<decimal?>("CommissionPct")
                        .HasColumnName("commission_pct")
                        .HasColumnType("numeric(2, 2)");

                    b.Property<decimal?>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnName("hire_date")
                        .HasColumnType("date");

                    b.Property<string>("JobId")
                        .HasColumnName("job_id")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("ManagerId")
                        .HasColumnName("manager_id")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Salary")
                        .HasColumnName("salary")
                        .HasColumnType("numeric(8, 2)");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Employees_1");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.ToTable("Employees","HR");
                });

            modelBuilder.Entity("Linq.Models.Genres", b =>
                {
                    b.Property<int?>("GenId")
                        .HasColumnName("gen_id")
                        .HasColumnType("int");

                    b.Property<string>("GenTitle")
                        .HasColumnName("gen_title")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.ToTable("Genres","Movies");
                });

            modelBuilder.Entity("Linq.Models.GoalDetails", b =>
                {
                    b.Property<int>("GoalId")
                        .HasColumnName("goal_id")
                        .HasColumnType("int");

                    b.Property<int?>("GoalHalf")
                        .HasColumnName("goal_half")
                        .HasColumnType("int");

                    b.Property<string>("GoalSchedule")
                        .HasColumnName("goal_schedule")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<int?>("GoalTime")
                        .HasColumnName("goal_time")
                        .HasColumnType("int");

                    b.Property<string>("GoalType")
                        .HasColumnName("goal_type")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<string>("PlayStage")
                        .HasColumnName("play_stage")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.HasKey("GoalId");

                    b.HasIndex("MatchNo");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("goal_details","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.JobGrades", b =>
                {
                    b.Property<string>("GradeLevel")
                        .HasColumnName("grade_level")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("HighestSal")
                        .HasColumnName("highest_sal")
                        .HasColumnType("numeric(5, 0)");

                    b.Property<decimal?>("LowestSal")
                        .HasColumnName("lowest_sal")
                        .HasColumnType("numeric(5, 0)");

                    b.HasKey("GradeLevel");

                    b.ToTable("Job_Grades","HR");
                });

            modelBuilder.Entity("Linq.Models.JobHistory", b =>
                {
                    b.Property<decimal>("EmployeeId")
                        .HasColumnName("employee_id")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<decimal?>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("JobId")
                        .HasColumnName("job_id")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("EmployeeId", "StartDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobId");

                    b.ToTable("Job_History","HR");
                });

            modelBuilder.Entity("Linq.Models.Jobs", b =>
                {
                    b.Property<string>("JobId")
                        .HasColumnName("job_id")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnName("job_title")
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnName("max_salary")
                        .HasColumnType("numeric(6, 0)");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnName("min_salary")
                        .HasColumnType("numeric(6, 0)");

                    b.HasKey("JobId");

                    b.ToTable("Jobs","HR");
                });

            modelBuilder.Entity("Linq.Models.Locations", b =>
                {
                    b.Property<decimal>("LocationId")
                        .HasColumnName("location_id")
                        .HasColumnType("numeric(4, 0)");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("StateProvince")
                        .HasColumnName("state_province")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("StreetAddress")
                        .HasColumnName("street_address")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("LocationId");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations","HR");
                });

            modelBuilder.Entity("Linq.Models.MatchCaptain", b =>
                {
                    b.Property<int?>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerCaptain")
                        .HasColumnName("player_captain")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.HasIndex("MatchNo");

                    b.HasIndex("TeamId");

                    b.ToTable("match_captain","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.MatchDetails", b =>
                {
                    b.Property<int?>("AssRef")
                        .HasColumnName("ass_ref")
                        .HasColumnType("int");

                    b.Property<string>("DecidedBy")
                        .HasColumnName("decided_by")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("GoalScore")
                        .HasColumnName("goal_score")
                        .HasColumnType("int");

                    b.Property<int?>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<int?>("PenaltyScore")
                        .HasColumnName("penalty_score")
                        .HasColumnType("int");

                    b.Property<string>("PlayStage")
                        .HasColumnName("play_stage")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("PlayerGk")
                        .HasColumnName("player_gk")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.Property<string>("WinLose")
                        .HasColumnName("win_lose")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.HasIndex("AssRef");

                    b.HasIndex("MatchNo");

                    b.HasIndex("TeamId");

                    b.ToTable("match_details","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.MatchMast", b =>
                {
                    b.Property<int>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<int?>("Audience")
                        .HasColumnName("audience")
                        .HasColumnType("int");

                    b.Property<string>("DecidedBy")
                        .HasColumnName("decided_by")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("GoalScore")
                        .HasColumnName("goal_score")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime?>("PlayDate")
                        .HasColumnName("play_date")
                        .HasColumnType("date");

                    b.Property<string>("PlayStage")
                        .HasColumnName("play_stage")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("PlrOfMatch")
                        .HasColumnName("plr_of_match")
                        .HasColumnType("int");

                    b.Property<int?>("RefereeId")
                        .HasColumnName("referee_id")
                        .HasColumnType("int");

                    b.Property<string>("Results")
                        .HasColumnName("results")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int?>("Stop1Sec")
                        .HasColumnName("stop1_sec")
                        .HasColumnType("int");

                    b.Property<int?>("Stop2Sec")
                        .HasColumnName("stop2_sec")
                        .HasColumnType("int");

                    b.Property<int?>("VenueId")
                        .HasColumnName("venue_id")
                        .HasColumnType("int");

                    b.HasKey("MatchNo");

                    b.HasIndex("RefereeId");

                    b.HasIndex("VenueId");

                    b.ToTable("match_mast","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.Medication", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnName("code")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnName("brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Medication","Hospital");
                });

            modelBuilder.Entity("Linq.Models.Movie", b =>
                {
                    b.Property<DateTime?>("MovDtRel")
                        .HasColumnName("mov_dt_rel")
                        .HasColumnType("date");

                    b.Property<int?>("MovId")
                        .HasColumnName("mov_id")
                        .HasColumnType("int");

                    b.Property<string>("MovLang")
                        .HasColumnName("mov_lang")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("MovRelCountry")
                        .HasColumnName("mov_rel_country")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<int?>("MovTime")
                        .HasColumnName("mov_time")
                        .HasColumnType("int");

                    b.Property<string>("MovTitle")
                        .HasColumnName("mov_title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("MovYear")
                        .HasColumnName("mov_year")
                        .HasColumnType("int");

                    b.ToTable("Movie","Movies");
                });

            modelBuilder.Entity("Linq.Models.MovieCast", b =>
                {
                    b.Property<int?>("ActId")
                        .HasColumnName("act_id")
                        .HasColumnType("int");

                    b.Property<int?>("MovId")
                        .HasColumnName("mov_id")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnName("role")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.ToTable("Movie_cast","Movies");
                });

            modelBuilder.Entity("Linq.Models.MovieDirection", b =>
                {
                    b.Property<int?>("DirId")
                        .HasColumnName("dir_id")
                        .HasColumnType("int");

                    b.Property<int?>("MovId")
                        .HasColumnName("mov_id")
                        .HasColumnType("int");

                    b.ToTable("Movie_Direction","Movies");
                });

            modelBuilder.Entity("Linq.Models.MovieGenres", b =>
                {
                    b.Property<int?>("GenId")
                        .HasColumnName("gen_id")
                        .HasColumnType("int");

                    b.Property<int?>("MovId")
                        .HasColumnName("mov_id")
                        .HasColumnType("int");

                    b.ToTable("Movie_Genres","Movies");
                });

            modelBuilder.Entity("Linq.Models.Nurse", b =>
                {
                    b.Property<int>("Employeeid")
                        .HasColumnName("employeeid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Registered")
                        .HasColumnName("registered")
                        .HasColumnType("bit");

                    b.Property<int?>("Ssn")
                        .HasColumnName("ssn")
                        .HasColumnType("int");

                    b.HasKey("Employeeid");

                    b.ToTable("Nurse","Hospital");
                });

            modelBuilder.Entity("Linq.Models.OnCall", b =>
                {
                    b.Property<int>("Blockcode")
                        .HasColumnName("blockcode")
                        .HasColumnType("int");

                    b.Property<int>("Blockfloor")
                        .HasColumnName("blockfloor")
                        .HasColumnType("int");

                    b.Property<int>("Nurse")
                        .HasColumnName("nurse")
                        .HasColumnType("int");

                    b.Property<DateTime>("Oncallend")
                        .HasColumnName("oncallend")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Oncallstart")
                        .HasColumnName("oncallstart")
                        .HasColumnType("datetime");

                    b.HasIndex("Nurse");

                    b.HasIndex("Blockfloor", "Blockcode");

                    b.ToTable("On-Call","Hospital");
                });

            modelBuilder.Entity("Linq.Models.Orders", b =>
                {
                    b.Property<decimal>("OrdNo")
                        .HasColumnName("ord_no")
                        .HasColumnType("numeric(5, 0)");

                    b.Property<decimal?>("CustomerId")
                        .HasColumnName("customer_id")
                        .HasColumnType("numeric(5, 0)");

                    b.Property<DateTime?>("OrdDate")
                        .HasColumnName("ord_date")
                        .HasColumnType("date");

                    b.Property<decimal?>("PurchAmt")
                        .HasColumnName("purch_amt")
                        .HasColumnType("numeric(8, 2)");

                    b.Property<decimal?>("SalesmanId")
                        .HasColumnName("salesman_id")
                        .HasColumnType("numeric(5, 0)");

                    b.HasKey("OrdNo");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesmanId");

                    b.ToTable("Orders","Inventory");
                });

            modelBuilder.Entity("Linq.Models.Patient", b =>
                {
                    b.Property<int>("Ssn")
                        .HasColumnName("ssn")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Insuranceid")
                        .HasColumnName("insuranceid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Pcp")
                        .HasColumnName("pcp")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ssn");

                    b.HasIndex("Pcp");

                    b.ToTable("Patient","Hospital");
                });

            modelBuilder.Entity("Linq.Models.PenaltyGk", b =>
                {
                    b.Property<int?>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerGk")
                        .HasColumnName("player_gk")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.HasIndex("MatchNo");

                    b.HasIndex("TeamId");

                    b.ToTable("penalty_gk","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.PenaltyShootout", b =>
                {
                    b.Property<int>("KickId")
                        .HasColumnName("kick_id")
                        .HasColumnType("int");

                    b.Property<int?>("KickNo")
                        .HasColumnName("kick_no")
                        .HasColumnType("int");

                    b.Property<int?>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int");

                    b.Property<string>("ScoreGoal")
                        .HasColumnName("score_goal")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.HasKey("KickId");

                    b.HasIndex("MatchNo");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("penalty_shootout","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.Physician", b =>
                {
                    b.Property<int>("Employeeid")
                        .HasColumnName("employeeid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ssn")
                        .HasColumnName("ssn")
                        .HasColumnType("int");

                    b.HasKey("Employeeid");

                    b.ToTable("Physician","Hospital");
                });

            modelBuilder.Entity("Linq.Models.PlayerBooked", b =>
                {
                    b.Property<int?>("BookingTime")
                        .HasColumnName("booking_time")
                        .HasColumnType("int");

                    b.Property<int?>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<int?>("PlayHalf")
                        .HasColumnName("play_half")
                        .HasColumnType("int");

                    b.Property<string>("PlaySchedule")
                        .HasColumnName("play_schedule")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<int?>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int");

                    b.Property<string>("SentOff")
                        .HasColumnName("sent_off")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.HasIndex("MatchNo");

                    b.HasIndex("PlayerId");

                    b.ToTable("player_booked","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.PlayerInOut", b =>
                {
                    b.Property<string>("InOut")
                        .HasColumnName("in_out")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("MatchNo")
                        .HasColumnName("match_no")
                        .HasColumnType("int");

                    b.Property<int?>("PlayHalf")
                        .HasColumnName("play_half")
                        .HasColumnType("int");

                    b.Property<string>("PlaySchedule")
                        .HasColumnName("play_schedule")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<int?>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.Property<int?>("TimeInOut")
                        .HasColumnName("time_in_out")
                        .HasColumnType("int");

                    b.HasIndex("MatchNo");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("player_in_out","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.PlayerMast", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnName("age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DtOfBir")
                        .HasColumnName("dt_of_bir")
                        .HasColumnType("date");

                    b.Property<int?>("JerseyNo")
                        .HasColumnName("jersey_no")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnName("player_name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("PlayingClub")
                        .HasColumnName("playing_club")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("PosiToPlay")
                        .HasColumnName("posi_to_play")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("PosiToPlay");

                    b.ToTable("player_mast","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.PlayingPosition", b =>
                {
                    b.Property<string>("PositionId")
                        .HasColumnName("position_id")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<string>("PositionDesc")
                        .HasColumnName("position_desc")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("PositionId");

                    b.ToTable("playing_position","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.Prescribes", b =>
                {
                    b.Property<int>("Physician")
                        .HasColumnName("physician")
                        .HasColumnType("int");

                    b.Property<int>("Patient")
                        .HasColumnName("patient")
                        .HasColumnType("int");

                    b.Property<int>("Medication")
                        .HasColumnName("medication")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Appointment")
                        .HasColumnName("appointment")
                        .HasColumnType("int");

                    b.Property<string>("Dose")
                        .HasColumnName("dose")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Physician", "Patient", "Medication", "Date")
                        .HasName("PK__Prescrib__2CED93CB1F2B9CEA");

                    b.HasIndex("Appointment");

                    b.HasIndex("Medication");

                    b.HasIndex("Patient");

                    b.ToTable("Prescribes","Hospital");
                });

            modelBuilder.Entity("Linq.Models.Procedures", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnName("code")
                        .HasColumnType("int");

                    b.Property<float?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Procedures","Hospital");
                });

            modelBuilder.Entity("Linq.Models.Rating", b =>
                {
                    b.Property<int?>("MovId")
                        .HasColumnName("mov_id")
                        .HasColumnType("int");

                    b.Property<int?>("NumORatings")
                        .HasColumnName("num_o_ratings")
                        .HasColumnType("int");

                    b.Property<int?>("RevId")
                        .HasColumnName("rev_id")
                        .HasColumnType("int");

                    b.Property<decimal?>("RevStars")
                        .HasColumnName("rev_stars")
                        .HasColumnType("numeric(4, 2)");

                    b.ToTable("Rating","Movies");
                });

            modelBuilder.Entity("Linq.Models.RefereeMast", b =>
                {
                    b.Property<int>("RefereeId")
                        .HasColumnName("referee_id")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("int");

                    b.Property<string>("RefereeName")
                        .HasColumnName("referee_name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("RefereeId");

                    b.HasIndex("CountryId");

                    b.ToTable("referee_mast","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.Regions", b =>
                {
                    b.Property<decimal>("RegionId")
                        .HasColumnName("region_id")
                        .HasColumnType("numeric(10, 0)");

                    b.Property<string>("RegionName")
                        .HasColumnName("region_name")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("RegionId");

                    b.ToTable("Regions","HR");
                });

            modelBuilder.Entity("Linq.Models.Reviewer", b =>
                {
                    b.Property<int?>("RevId")
                        .HasColumnName("rev_id")
                        .HasColumnType("int");

                    b.Property<string>("RevName")
                        .HasColumnName("rev_name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.ToTable("Reviewer","Movies");
                });

            modelBuilder.Entity("Linq.Models.Room", b =>
                {
                    b.Property<int>("Roomnumber")
                        .HasColumnName("roomnumber")
                        .HasColumnType("int");

                    b.Property<int?>("Blockcode")
                        .HasColumnName("blockcode")
                        .HasColumnType("int");

                    b.Property<int?>("Blockfloor")
                        .HasColumnName("blockfloor")
                        .HasColumnType("int");

                    b.Property<string>("Roomtype")
                        .HasColumnName("roomtype")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool?>("Unavailable")
                        .HasColumnName("unavailable")
                        .HasColumnType("bit");

                    b.HasKey("Roomnumber");

                    b.HasIndex("Blockfloor", "Blockcode");

                    b.ToTable("Room","Hospital");
                });

            modelBuilder.Entity("Linq.Models.SalaryGrade", b =>
                {
                    b.Property<int>("Grade")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("grade")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaxSalary")
                        .HasColumnName("max_salary")
                        .HasColumnType("int");

                    b.Property<int?>("MinSalary")
                        .HasColumnName("min_salary")
                        .HasColumnType("int");

                    b.HasKey("Grade");

                    b.ToTable("salary_grade","Employee");
                });

            modelBuilder.Entity("Linq.Models.Salesman", b =>
                {
                    b.Property<decimal>("SalesmanId")
                        .HasColumnName("salesman_id")
                        .HasColumnType("numeric(5, 0)");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<decimal?>("Commission")
                        .HasColumnName("commission")
                        .HasColumnType("numeric(5, 2)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("SalesmanId");

                    b.ToTable("Salesman","Inventory");
                });

            modelBuilder.Entity("Linq.Models.SoccerCity", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("soccer_city","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.SoccerCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("int");

                    b.Property<string>("CountryAbbr")
                        .HasColumnName("country_abbr")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("CountryId");

                    b.ToTable("soccer_country","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.SoccerTeam", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.Property<int?>("Draw")
                        .HasColumnName("draw")
                        .HasColumnType("int");

                    b.Property<int?>("GoalAgnst")
                        .HasColumnName("goal_agnst")
                        .HasColumnType("int");

                    b.Property<int?>("GoalDiff")
                        .HasColumnName("goal_diff")
                        .HasColumnType("int");

                    b.Property<int?>("GoalFor")
                        .HasColumnName("goal_for")
                        .HasColumnType("int");

                    b.Property<int?>("GroupPosition")
                        .HasColumnName("group_position")
                        .HasColumnType("int");

                    b.Property<int?>("Lost")
                        .HasColumnName("lost")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayed")
                        .HasColumnName("match_played")
                        .HasColumnType("int");

                    b.Property<int?>("Points")
                        .HasColumnName("points")
                        .HasColumnType("int");

                    b.Property<string>("TeamGroup")
                        .HasColumnName("team_group")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("Won")
                        .HasColumnName("won")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.ToTable("soccer_team","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.SoccerVenue", b =>
                {
                    b.Property<int>("VenueId")
                        .HasColumnName("venue_id")
                        .HasColumnType("int");

                    b.Property<int?>("AudCapacity")
                        .HasColumnName("aud_capacity")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("int");

                    b.Property<string>("VenueName")
                        .HasColumnName("venue_name")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("VenueId");

                    b.HasIndex("CityId");

                    b.ToTable("soccer_venue","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.Stay", b =>
                {
                    b.Property<int>("Stayid")
                        .HasColumnName("stayid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("datetime");

                    b.Property<int?>("Patient")
                        .HasColumnName("patient")
                        .HasColumnType("int");

                    b.Property<int?>("Room")
                        .HasColumnName("room")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("datetime");

                    b.HasKey("Stayid");

                    b.HasIndex("Patient");

                    b.HasIndex("Room");

                    b.ToTable("Stay","Hospital");
                });

            modelBuilder.Entity("Linq.Models.TeamCoaches", b =>
                {
                    b.Property<int?>("CoachId")
                        .HasColumnName("coach_id")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnName("team_id")
                        .HasColumnType("int");

                    b.HasIndex("CoachId");

                    b.HasIndex("TeamId");

                    b.ToTable("team_coaches","SOCCER");
                });

            modelBuilder.Entity("Linq.Models.TrainedIn", b =>
                {
                    b.Property<int>("Physician")
                        .HasColumnName("physician")
                        .HasColumnType("int");

                    b.Property<int>("Treatment")
                        .HasColumnName("treatment")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Certificationdate")
                        .HasColumnName("certificationdate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Certificationexpires")
                        .HasColumnName("certificationexpires")
                        .HasColumnType("date");

                    b.HasKey("Physician", "Treatment")
                        .HasName("PK__Trained___9E42192E2FC97BA5");

                    b.HasIndex("Treatment");

                    b.ToTable("Trained_in","Hospital");
                });

            modelBuilder.Entity("Linq.Models.Undergoes", b =>
                {
                    b.Property<int>("Patient")
                        .HasColumnName("patient")
                        .HasColumnType("int");

                    b.Property<int>("Procedure")
                        .HasColumnName("procedure")
                        .HasColumnType("int");

                    b.Property<int>("Stay")
                        .HasColumnName("stay")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime");

                    b.Property<int?>("Assistingnurse")
                        .HasColumnName("assistingnurse")
                        .HasColumnType("int");

                    b.Property<int?>("Physician")
                        .HasColumnName("physician")
                        .HasColumnType("int");

                    b.HasKey("Patient", "Procedure", "Stay", "Date")
                        .HasName("PK__Undergoe__296B7898CFAF34AD");

                    b.HasIndex("Assistingnurse");

                    b.HasIndex("Physician");

                    b.HasIndex("Procedure");

                    b.HasIndex("Stay");

                    b.ToTable("Undergoes","Hospital");
                });

            modelBuilder.Entity("Linq.Models.AffiliatedWith", b =>
                {
                    b.HasOne("Linq.Models.Department1", "DepartmentNavigation")
                        .WithMany("AffiliatedWith")
                        .HasForeignKey("Department")
                        .HasConstraintName("FK_Affiliated_With_Department")
                        .IsRequired();

                    b.HasOne("Linq.Models.Physician", "PhysicianNavigation")
                        .WithMany("AffiliatedWith")
                        .HasForeignKey("Physician")
                        .HasConstraintName("FK_Affiliated_With_Physician")
                        .IsRequired();
                });

            modelBuilder.Entity("Linq.Models.Appointment", b =>
                {
                    b.HasOne("Linq.Models.Patient", "PatientNavigation")
                        .WithMany("Appointment")
                        .HasForeignKey("Patient")
                        .HasConstraintName("FK_Appointment_Patient");

                    b.HasOne("Linq.Models.Physician", "PhysicianNavigation")
                        .WithMany("Appointment")
                        .HasForeignKey("Physician")
                        .HasConstraintName("FK_Appointment_Physician");

                    b.HasOne("Linq.Models.Nurse", "PrepnurseNavigation")
                        .WithMany("Appointment")
                        .HasForeignKey("Prepnurse")
                        .HasConstraintName("FK_Appointment_Nurse");
                });

            modelBuilder.Entity("Linq.Models.AsstRefereeMast", b =>
                {
                    b.HasOne("Linq.Models.SoccerCountry", "Country")
                        .WithMany("AsstRefereeMast")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_asst_referee_mast_soccer_country");
                });

            modelBuilder.Entity("Linq.Models.Countries", b =>
                {
                    b.HasOne("Linq.Models.Regions", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Countries_Regions");
                });

            modelBuilder.Entity("Linq.Models.Department1", b =>
                {
                    b.HasOne("Linq.Models.Physician", "HeadNavigation")
                        .WithMany("Department1")
                        .HasForeignKey("Head")
                        .HasConstraintName("FK_Department_Physician");
                });

            modelBuilder.Entity("Linq.Models.Departments", b =>
                {
                    b.HasOne("Linq.Models.Locations", "Location")
                        .WithMany("Departments")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Departments_Locations");
                });

            modelBuilder.Entity("Linq.Models.Employees", b =>
                {
                    b.HasOne("Linq.Models.Department", "Dep")
                        .WithMany("Employees")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_employees_department");
                });

            modelBuilder.Entity("Linq.Models.Employees1", b =>
                {
                    b.HasOne("Linq.Models.Departments", "Department")
                        .WithMany("Employees1")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Employees__depar__18EBB532");

                    b.HasOne("Linq.Models.Jobs", "Job")
                        .WithMany("Employees1")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_Employees_Jobs");
                });

            modelBuilder.Entity("Linq.Models.GoalDetails", b =>
                {
                    b.HasOne("Linq.Models.MatchMast", "MatchNoNavigation")
                        .WithMany("GoalDetails")
                        .HasForeignKey("MatchNo")
                        .HasConstraintName("FK_goal_details_match_mast");

                    b.HasOne("Linq.Models.PlayerMast", "Player")
                        .WithMany("GoalDetails")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_goal_detailsPlayer");

                    b.HasOne("Linq.Models.SoccerTeam", "Team")
                        .WithMany("GoalDetails")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_goal_details_soccer_team");
                });

            modelBuilder.Entity("Linq.Models.JobHistory", b =>
                {
                    b.HasOne("Linq.Models.Departments", "Department")
                        .WithMany("JobHistory")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Job_History_Departments");

                    b.HasOne("Linq.Models.Employees1", "Employee")
                        .WithMany("JobHistory")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Job_Histo__emplo__1AD3FDA4")
                        .IsRequired();

                    b.HasOne("Linq.Models.Jobs", "Job")
                        .WithMany("JobHistory")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_Job_History_Jobs");
                });

            modelBuilder.Entity("Linq.Models.Locations", b =>
                {
                    b.HasOne("Linq.Models.Countries", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__Locations__count__1DB06A4F");
                });

            modelBuilder.Entity("Linq.Models.MatchCaptain", b =>
                {
                    b.HasOne("Linq.Models.MatchMast", "MatchNoNavigation")
                        .WithMany()
                        .HasForeignKey("MatchNo")
                        .HasConstraintName("FK_match_captain_match_mast");

                    b.HasOne("Linq.Models.SoccerTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_match_captain_soccer_team");
                });

            modelBuilder.Entity("Linq.Models.MatchDetails", b =>
                {
                    b.HasOne("Linq.Models.AsstRefereeMast", "AssRefNavigation")
                        .WithMany()
                        .HasForeignKey("AssRef")
                        .HasConstraintName("FK_match_details_asst_referee_mast");

                    b.HasOne("Linq.Models.MatchMast", "MatchNoNavigation")
                        .WithMany()
                        .HasForeignKey("MatchNo")
                        .HasConstraintName("FK_match_details_match_mast");

                    b.HasOne("Linq.Models.SoccerTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_match_details_soccer_team");
                });

            modelBuilder.Entity("Linq.Models.MatchMast", b =>
                {
                    b.HasOne("Linq.Models.RefereeMast", "Referee")
                        .WithMany("MatchMast")
                        .HasForeignKey("RefereeId")
                        .HasConstraintName("FK_match_mast_referee_mast");

                    b.HasOne("Linq.Models.SoccerVenue", "Venue")
                        .WithMany("MatchMast")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK_match_mast_soccer_venue");
                });

            modelBuilder.Entity("Linq.Models.OnCall", b =>
                {
                    b.HasOne("Linq.Models.Nurse", "NurseNavigation")
                        .WithMany()
                        .HasForeignKey("Nurse")
                        .HasConstraintName("FK_On-Call_Nurse")
                        .IsRequired();

                    b.HasOne("Linq.Models.Block", "Block")
                        .WithMany()
                        .HasForeignKey("Blockfloor", "Blockcode")
                        .HasConstraintName("fk_OnCall_Block")
                        .IsRequired();
                });

            modelBuilder.Entity("Linq.Models.Orders", b =>
                {
                    b.HasOne("Linq.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Orders_Customer");

                    b.HasOne("Linq.Models.Salesman", "Salesman")
                        .WithMany("Orders")
                        .HasForeignKey("SalesmanId")
                        .HasConstraintName("FK_Orders_Salesman");
                });

            modelBuilder.Entity("Linq.Models.Patient", b =>
                {
                    b.HasOne("Linq.Models.Physician", "PcpNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("Pcp")
                        .HasConstraintName("FK_Patient_Physician");
                });

            modelBuilder.Entity("Linq.Models.PenaltyGk", b =>
                {
                    b.HasOne("Linq.Models.MatchMast", "MatchNoNavigation")
                        .WithMany()
                        .HasForeignKey("MatchNo")
                        .HasConstraintName("FK_penalty_gk_match_mast");

                    b.HasOne("Linq.Models.SoccerTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_penalty_gk_soccer_team");
                });

            modelBuilder.Entity("Linq.Models.PenaltyShootout", b =>
                {
                    b.HasOne("Linq.Models.MatchMast", "MatchNoNavigation")
                        .WithMany("PenaltyShootout")
                        .HasForeignKey("MatchNo")
                        .HasConstraintName("FK_penalty_shootout_match_mast");

                    b.HasOne("Linq.Models.PlayerMast", "Player")
                        .WithMany("PenaltyShootout")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_penalty_shootoutPlayer");

                    b.HasOne("Linq.Models.SoccerTeam", "Team")
                        .WithMany("PenaltyShootout")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_penalty_shootout_soccer_team");
                });

            modelBuilder.Entity("Linq.Models.PlayerBooked", b =>
                {
                    b.HasOne("Linq.Models.MatchMast", "MatchNoNavigation")
                        .WithMany()
                        .HasForeignKey("MatchNo")
                        .HasConstraintName("FK_player_booked_match_mast");

                    b.HasOne("Linq.Models.PlayerMast", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_player_bookedPlayer");
                });

            modelBuilder.Entity("Linq.Models.PlayerInOut", b =>
                {
                    b.HasOne("Linq.Models.MatchMast", "MatchNoNavigation")
                        .WithMany()
                        .HasForeignKey("MatchNo")
                        .HasConstraintName("FK_player_in_out_match_mast");

                    b.HasOne("Linq.Models.PlayerMast", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_player_in_outPlayer");

                    b.HasOne("Linq.Models.SoccerTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_player_in_out_soccer_team");
                });

            modelBuilder.Entity("Linq.Models.PlayerMast", b =>
                {
                    b.HasOne("Linq.Models.PlayingPosition", "PosiToPlayNavigation")
                        .WithMany("PlayerMast")
                        .HasForeignKey("PosiToPlay")
                        .HasConstraintName("FK_player_mast_playing_position");
                });

            modelBuilder.Entity("Linq.Models.Prescribes", b =>
                {
                    b.HasOne("Linq.Models.Appointment", "AppointmentNavigation")
                        .WithMany("Prescribes")
                        .HasForeignKey("Appointment")
                        .HasConstraintName("FK_Prescribes_Appointment");

                    b.HasOne("Linq.Models.Medication", "MedicationNavigation")
                        .WithMany("Prescribes")
                        .HasForeignKey("Medication")
                        .HasConstraintName("FK_Prescribes_Medication")
                        .IsRequired();

                    b.HasOne("Linq.Models.Patient", "PatientNavigation")
                        .WithMany("Prescribes")
                        .HasForeignKey("Patient")
                        .HasConstraintName("FK_Prescribes_Patient")
                        .IsRequired();

                    b.HasOne("Linq.Models.Physician", "PhysicianNavigation")
                        .WithMany("Prescribes")
                        .HasForeignKey("Physician")
                        .HasConstraintName("FK_Prescribes_Physician")
                        .IsRequired();
                });

            modelBuilder.Entity("Linq.Models.RefereeMast", b =>
                {
                    b.HasOne("Linq.Models.SoccerCountry", "Country")
                        .WithMany("RefereeMast")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_referee_mast_soccer_country");
                });

            modelBuilder.Entity("Linq.Models.Room", b =>
                {
                    b.HasOne("Linq.Models.Block", "Block")
                        .WithMany("Room")
                        .HasForeignKey("Blockfloor", "Blockcode")
                        .HasConstraintName("fk_Room_Block");
                });

            modelBuilder.Entity("Linq.Models.SoccerCity", b =>
                {
                    b.HasOne("Linq.Models.SoccerCountry", "Country")
                        .WithMany("SoccerCity")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_soccer_city_soccer_country");
                });

            modelBuilder.Entity("Linq.Models.SoccerVenue", b =>
                {
                    b.HasOne("Linq.Models.SoccerCity", "City")
                        .WithMany("SoccerVenue")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_soccer_venue_soccer_city");
                });

            modelBuilder.Entity("Linq.Models.Stay", b =>
                {
                    b.HasOne("Linq.Models.Patient", "PatientNavigation")
                        .WithMany("Stay")
                        .HasForeignKey("Patient")
                        .HasConstraintName("FK_Stay_Patient");

                    b.HasOne("Linq.Models.Room", "RoomNavigation")
                        .WithMany("Stay")
                        .HasForeignKey("Room")
                        .HasConstraintName("FK_Stay_Room");
                });

            modelBuilder.Entity("Linq.Models.TeamCoaches", b =>
                {
                    b.HasOne("Linq.Models.CoachMast", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .HasConstraintName("FK_team_coaches_coach_mast");

                    b.HasOne("Linq.Models.SoccerTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_team_coaches_soccer_team");
                });

            modelBuilder.Entity("Linq.Models.TrainedIn", b =>
                {
                    b.HasOne("Linq.Models.Physician", "PhysicianNavigation")
                        .WithMany("TrainedIn")
                        .HasForeignKey("Physician")
                        .HasConstraintName("FK_Trained_in_Physician")
                        .IsRequired();

                    b.HasOne("Linq.Models.Procedures", "TreatmentNavigation")
                        .WithMany("TrainedIn")
                        .HasForeignKey("Treatment")
                        .HasConstraintName("FK_Trained_in_Procedures")
                        .IsRequired();
                });

            modelBuilder.Entity("Linq.Models.Undergoes", b =>
                {
                    b.HasOne("Linq.Models.Nurse", "AssistingnurseNavigation")
                        .WithMany("Undergoes")
                        .HasForeignKey("Assistingnurse")
                        .HasConstraintName("FK_Undergoes_Nurse");

                    b.HasOne("Linq.Models.Patient", "PatientNavigation")
                        .WithMany("Undergoes")
                        .HasForeignKey("Patient")
                        .HasConstraintName("FK_Undergoes_Patient")
                        .IsRequired();

                    b.HasOne("Linq.Models.Physician", "PhysicianNavigation")
                        .WithMany("Undergoes")
                        .HasForeignKey("Physician")
                        .HasConstraintName("FK_Undergoes_Physician");

                    b.HasOne("Linq.Models.Procedures", "ProcedureNavigation")
                        .WithMany("Undergoes")
                        .HasForeignKey("Procedure")
                        .HasConstraintName("FK_Undergoes_Procedures")
                        .IsRequired();

                    b.HasOne("Linq.Models.Stay", "StayNavigation")
                        .WithMany("Undergoes")
                        .HasForeignKey("Stay")
                        .HasConstraintName("FK_Undergoes_Stay")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
